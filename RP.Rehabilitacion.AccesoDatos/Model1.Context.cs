//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RP.Rehabilitacion.AccesoDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class RPEntities : DbContext
    {
        public RPEntities()
            : base("name=RPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Alta> Alta { get; set; }
        public DbSet<Cita> Cita { get; set; }
        public DbSet<Cronograma_Especialista> Cronograma_Especialista { get; set; }
        public DbSet<Cronograma_EspecialistaDetalle> Cronograma_EspecialistaDetalle { get; set; }
        public DbSet<Cronograma_Servicio> Cronograma_Servicio { get; set; }
        public DbSet<Cronograma_Terapista> Cronograma_Terapista { get; set; }
        public DbSet<Cronograma_TerapistaDetalle> Cronograma_TerapistaDetalle { get; set; }
        public DbSet<Diagnostico> Diagnostico { get; set; }
        public DbSet<Equipo> Equipo { get; set; }
        public DbSet<Especialista> Especialista { get; set; }
        public DbSet<Ficha_Evolucion> Ficha_Evolucion { get; set; }
        public DbSet<Historia_Clinica> Historia_Clinica { get; set; }
        public DbSet<Paciente> Paciente { get; set; }
        public DbSet<Sala> Sala { get; set; }
        public DbSet<Terapista> Terapista { get; set; }
        public DbSet<TipoDocumento> TipoDocumento { get; set; }
        public DbSet<TipoEspecialidad> TipoEspecialidad { get; set; }
    
        public virtual ObjectResult<spUPCtp2_DatosDiagnostico_Result> spUPCtp2_DatosDiagnostico(string dNIPaciente)
        {
            var dNIPacienteParameter = dNIPaciente != null ?
                new ObjectParameter("DNIPaciente", dNIPaciente) :
                new ObjectParameter("DNIPaciente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUPCtp2_DatosDiagnostico_Result>("spUPCtp2_DatosDiagnostico", dNIPacienteParameter);
        }
    
        public virtual ObjectResult<string> spUPCtp2_HorasXFechaTerapista(Nullable<System.DateTime> fecha)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spUPCtp2_HorasXFechaTerapista", fechaParameter);
        }
    
        public virtual ObjectResult<spUPCtp2_ProfesionalXFechaYHora_Result> spUPCtp2_ProfesionalXFechaYHora(string fecha, string hora, Nullable<int> tipoProfesional)
        {
            var fechaParameter = fecha != null ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(string));
    
            var horaParameter = hora != null ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(string));
    
            var tipoProfesionalParameter = tipoProfesional.HasValue ?
                new ObjectParameter("TipoProfesional", tipoProfesional) :
                new ObjectParameter("TipoProfesional", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUPCtp2_ProfesionalXFechaYHora_Result>("spUPCtp2_ProfesionalXFechaYHora", fechaParameter, horaParameter, tipoProfesionalParameter);
        }
    
        public virtual ObjectResult<spUPCtp2_SesionesProgramadasXPaciente_Result> spUPCtp2_SesionesProgramadasXPaciente(string docPaciente)
        {
            var docPacienteParameter = docPaciente != null ?
                new ObjectParameter("DocPaciente", docPaciente) :
                new ObjectParameter("DocPaciente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUPCtp2_SesionesProgramadasXPaciente_Result>("spUPCtp2_SesionesProgramadasXPaciente", docPacienteParameter);
        }
    
        public virtual ObjectResult<spUPCtp2_DatosPaciente_Result> spUPCtp2_DatosPaciente(string nroDoc)
        {
            var nroDocParameter = nroDoc != null ?
                new ObjectParameter("nroDoc", nroDoc) :
                new ObjectParameter("nroDoc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUPCtp2_DatosPaciente_Result>("spUPCtp2_DatosPaciente", nroDocParameter);
        }
    
        public virtual int spUPCtp2_ActualizarSesionXFechaYHora(string pacienteid, string terapistaid, string fecha, string hora, Nullable<int> nro_sesion, string observacion)
        {
            var pacienteidParameter = pacienteid != null ?
                new ObjectParameter("Pacienteid", pacienteid) :
                new ObjectParameter("Pacienteid", typeof(string));
    
            var terapistaidParameter = terapistaid != null ?
                new ObjectParameter("Terapistaid", terapistaid) :
                new ObjectParameter("Terapistaid", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(string));
    
            var horaParameter = hora != null ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(string));
    
            var nro_sesionParameter = nro_sesion.HasValue ?
                new ObjectParameter("Nro_sesion", nro_sesion) :
                new ObjectParameter("Nro_sesion", typeof(int));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("observacion", observacion) :
                new ObjectParameter("observacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUPCtp2_ActualizarSesionXFechaYHora", pacienteidParameter, terapistaidParameter, fechaParameter, horaParameter, nro_sesionParameter, observacionParameter);
        }
    
        public virtual ObjectResult<spUPCtp2_SesionPacienteXFechaHora_Result> spUPCtp2_SesionPacienteXFechaHora(string docPaciente, string fecha, string hora)
        {
            var docPacienteParameter = docPaciente != null ?
                new ObjectParameter("DocPaciente", docPaciente) :
                new ObjectParameter("DocPaciente", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(string));
    
            var horaParameter = hora != null ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUPCtp2_SesionPacienteXFechaHora_Result>("spUPCtp2_SesionPacienteXFechaHora", docPacienteParameter, fechaParameter, horaParameter);
        }
    
        public virtual ObjectResult<spUPCtp2_DIagnosticosPaciente_Result> spUPCtp2_DIagnosticosPaciente(Nullable<int> pacienteId)
        {
            var pacienteIdParameter = pacienteId.HasValue ?
                new ObjectParameter("pacienteId", pacienteId) :
                new ObjectParameter("pacienteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUPCtp2_DIagnosticosPaciente_Result>("spUPCtp2_DIagnosticosPaciente", pacienteIdParameter);
        }
    
        public virtual int spUPCtp2_InsFichaEvolucion(Nullable<int> nroSesion, Nullable<System.DateTime> fecha, Nullable<System.DateTime> hora, Nullable<int> terapistaId, Nullable<int> idDiagnostico)
        {
            var nroSesionParameter = nroSesion.HasValue ?
                new ObjectParameter("nroSesion", nroSesion) :
                new ObjectParameter("nroSesion", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var horaParameter = hora.HasValue ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(System.DateTime));
    
            var terapistaIdParameter = terapistaId.HasValue ?
                new ObjectParameter("terapistaId", terapistaId) :
                new ObjectParameter("terapistaId", typeof(int));
    
            var idDiagnosticoParameter = idDiagnostico.HasValue ?
                new ObjectParameter("idDiagnostico", idDiagnostico) :
                new ObjectParameter("idDiagnostico", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUPCtp2_InsFichaEvolucion", nroSesionParameter, fechaParameter, horaParameter, terapistaIdParameter, idDiagnosticoParameter);
        }
    
        public virtual int spUPCtp2_ActualizarDiagnostico(Nullable<System.DateTime> fecha, string diagnostico, Nullable<int> periodo, Nullable<System.DateTime> fechaIniTerapia, string tratamiento, Nullable<int> nroSesiones, string observacion, Nullable<int> pacienteId, Nullable<int> especialistaId)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var diagnosticoParameter = diagnostico != null ?
                new ObjectParameter("diagnostico", diagnostico) :
                new ObjectParameter("diagnostico", typeof(string));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("periodo", periodo) :
                new ObjectParameter("periodo", typeof(int));
    
            var fechaIniTerapiaParameter = fechaIniTerapia.HasValue ?
                new ObjectParameter("fechaIniTerapia", fechaIniTerapia) :
                new ObjectParameter("fechaIniTerapia", typeof(System.DateTime));
    
            var tratamientoParameter = tratamiento != null ?
                new ObjectParameter("tratamiento", tratamiento) :
                new ObjectParameter("tratamiento", typeof(string));
    
            var nroSesionesParameter = nroSesiones.HasValue ?
                new ObjectParameter("nroSesiones", nroSesiones) :
                new ObjectParameter("nroSesiones", typeof(int));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("observacion", observacion) :
                new ObjectParameter("observacion", typeof(string));
    
            var pacienteIdParameter = pacienteId.HasValue ?
                new ObjectParameter("pacienteId", pacienteId) :
                new ObjectParameter("pacienteId", typeof(int));
    
            var especialistaIdParameter = especialistaId.HasValue ?
                new ObjectParameter("especialistaId", especialistaId) :
                new ObjectParameter("especialistaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUPCtp2_ActualizarDiagnostico", fechaParameter, diagnosticoParameter, periodoParameter, fechaIniTerapiaParameter, tratamientoParameter, nroSesionesParameter, observacionParameter, pacienteIdParameter, especialistaIdParameter);
        }
    }
}
