//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RP.Rehabilitacion.AccesoDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SIGH_RPEntities : DbContext
    {
        public SIGH_RPEntities()
            : base("name=SIGH_RPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<Ambiente_Especialidad> Ambiente_Especialidad { get; set; }
        public DbSet<Ambiente_Profesional> Ambiente_Profesional { get; set; }
        public DbSet<Cita> Citas { get; set; }
        public DbSet<CitaAdicional> CitaAdicionals { get; set; }
        public DbSet<Disponibilidad_Medica> Disponibilidad_Medica { get; set; }
        public DbSet<Especialidad_Prestacion> Especialidad_Prestacion { get; set; }
        public DbSet<HorarioMedico> HorarioMedicoes { get; set; }
        public DbSet<HorarioPrograma> HorarioProgramas { get; set; }
        public DbSet<Profesional_Especialidad> Profesional_Especialidad { get; set; }
        public DbSet<Programacion_Medica> Programacion_Medica { get; set; }
        public DbSet<Reserva_Cita> Reserva_Cita { get; set; }
        public DbSet<Ambiente> Ambientes { get; set; }
        public DbSet<Detalle_Historia_Clinica> Detalle_Historia_Clinica { get; set; }
        public DbSet<Historia_Clinica> Historia_Clinica { get; set; }
        public DbSet<Maestro> Maestroes { get; set; }
        public DbSet<Orden_Medica> Orden_Medica { get; set; }
        public DbSet<Paciente> Pacientes { get; set; }
        public DbSet<Persona> Personas { get; set; }
        public DbSet<Profesional> Profesionals { get; set; }
        public DbSet<Tipo_Intervencion> Tipo_Intervencion { get; set; }
        public DbSet<Turno> Turnoes { get; set; }
        public DbSet<Usuario> Usuarios { get; set; }
        public DbSet<Orden_Intervencion> Orden_Intervencion { get; set; }
        public DbSet<Requisito> Requisitos { get; set; }
        public DbSet<Requisitos_Orden_Int> Requisitos_Orden_Int { get; set; }
        public DbSet<Detalle_Plan_Servicio> Detalle_Plan_Servicio { get; set; }
        public DbSet<Detalle_Plan_Tratamiemto> Detalle_Plan_Tratamiemto { get; set; }
        public DbSet<Diagnostico> Diagnosticoes { get; set; }
        public DbSet<Equipo> Equipoes { get; set; }
        public DbSet<Equipo_Ambiente> Equipo_Ambiente { get; set; }
        public DbSet<Plan_Servicio> Plan_Servicio { get; set; }
        public DbSet<Plan_Tratamiento> Plan_Tratamiento { get; set; }
        public DbSet<PlanTratamiento_Agente> PlanTratamiento_Agente { get; set; }
        public DbSet<ProfesionalPlan> ProfesionalPlans { get; set; }
        public DbSet<Recomendacion_Agente> Recomendacion_Agente { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int USP_BuscarPaciente(Nullable<int> tipo_Documento_nIdTipoDocumento, string nNroDocumento)
        {
            var tipo_Documento_nIdTipoDocumentoParameter = tipo_Documento_nIdTipoDocumento.HasValue ?
                new ObjectParameter("Tipo_Documento_nIdTipoDocumento", tipo_Documento_nIdTipoDocumento) :
                new ObjectParameter("Tipo_Documento_nIdTipoDocumento", typeof(int));
    
            var nNroDocumentoParameter = nNroDocumento != null ?
                new ObjectParameter("nNroDocumento", nNroDocumento) :
                new ObjectParameter("nNroDocumento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_BuscarPaciente", tipo_Documento_nIdTipoDocumentoParameter, nNroDocumentoParameter);
        }
    
        public virtual ObjectResult<USP_ObtenerMaestro_Result> USP_ObtenerMaestro(string mAESTRODESC)
        {
            var mAESTRODESCParameter = mAESTRODESC != null ?
                new ObjectParameter("MAESTRODESC", mAESTRODESC) :
                new ObjectParameter("MAESTRODESC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ObtenerMaestro_Result>("USP_ObtenerMaestro", mAESTRODESCParameter);
        }
    
        public virtual ObjectResult<USP_ObtenerPaciente_Result> USP_ObtenerPaciente(Nullable<int> tIPDOC, string nRODOC)
        {
            var tIPDOCParameter = tIPDOC.HasValue ?
                new ObjectParameter("TIPDOC", tIPDOC) :
                new ObjectParameter("TIPDOC", typeof(int));
    
            var nRODOCParameter = nRODOC != null ?
                new ObjectParameter("NRODOC", nRODOC) :
                new ObjectParameter("NRODOC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ObtenerPaciente_Result>("USP_ObtenerPaciente", tIPDOCParameter, nRODOCParameter);
        }
    
        public virtual ObjectResult<USP_BuscarDiagnosticos_Result> USP_BuscarDiagnosticos(Nullable<int> nPacienteId)
        {
            var nPacienteIdParameter = nPacienteId.HasValue ?
                new ObjectParameter("nPacienteId", nPacienteId) :
                new ObjectParameter("nPacienteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_BuscarDiagnosticos_Result>("USP_BuscarDiagnosticos", nPacienteIdParameter);
        }
    
        public virtual int USP_GrabarCita(Nullable<int> nPacienteId, Nullable<int> nProfesionalId, Nullable<System.DateTime> dFecha, string dHora, Nullable<int> nDetPlanServicioId)
        {
            var nPacienteIdParameter = nPacienteId.HasValue ?
                new ObjectParameter("nPacienteId", nPacienteId) :
                new ObjectParameter("nPacienteId", typeof(int));
    
            var nProfesionalIdParameter = nProfesionalId.HasValue ?
                new ObjectParameter("nProfesionalId", nProfesionalId) :
                new ObjectParameter("nProfesionalId", typeof(int));
    
            var dFechaParameter = dFecha.HasValue ?
                new ObjectParameter("dFecha", dFecha) :
                new ObjectParameter("dFecha", typeof(System.DateTime));
    
            var dHoraParameter = dHora != null ?
                new ObjectParameter("dHora", dHora) :
                new ObjectParameter("dHora", typeof(string));
    
            var nDetPlanServicioIdParameter = nDetPlanServicioId.HasValue ?
                new ObjectParameter("nDetPlanServicioId", nDetPlanServicioId) :
                new ObjectParameter("nDetPlanServicioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GrabarCita", nPacienteIdParameter, nProfesionalIdParameter, dFechaParameter, dHoraParameter, nDetPlanServicioIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GrabarDiagnostico(Nullable<int> nCitaId, string cDetalleDiagnostico, Nullable<int> nTipoDiagnosticoId, Nullable<int> nNroTerapias, Nullable<int> nVecesSemana, Nullable<System.DateTime> fechaInicio)
        {
            var nCitaIdParameter = nCitaId.HasValue ?
                new ObjectParameter("nCitaId", nCitaId) :
                new ObjectParameter("nCitaId", typeof(int));
    
            var cDetalleDiagnosticoParameter = cDetalleDiagnostico != null ?
                new ObjectParameter("cDetalleDiagnostico", cDetalleDiagnostico) :
                new ObjectParameter("cDetalleDiagnostico", typeof(string));
    
            var nTipoDiagnosticoIdParameter = nTipoDiagnosticoId.HasValue ?
                new ObjectParameter("nTipoDiagnosticoId", nTipoDiagnosticoId) :
                new ObjectParameter("nTipoDiagnosticoId", typeof(int));
    
            var nNroTerapiasParameter = nNroTerapias.HasValue ?
                new ObjectParameter("nNroTerapias", nNroTerapias) :
                new ObjectParameter("nNroTerapias", typeof(int));
    
            var nVecesSemanaParameter = nVecesSemana.HasValue ?
                new ObjectParameter("nVecesSemana", nVecesSemana) :
                new ObjectParameter("nVecesSemana", typeof(int));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GrabarDiagnostico", nCitaIdParameter, cDetalleDiagnosticoParameter, nTipoDiagnosticoIdParameter, nNroTerapiasParameter, nVecesSemanaParameter, fechaInicioParameter);
        }
    
        public virtual int USP_GrabarDiagostico(Nullable<int> nCitaId, string cDetalleDiagnostico, Nullable<int> nTipoDiagnosticoId)
        {
            var nCitaIdParameter = nCitaId.HasValue ?
                new ObjectParameter("nCitaId", nCitaId) :
                new ObjectParameter("nCitaId", typeof(int));
    
            var cDetalleDiagnosticoParameter = cDetalleDiagnostico != null ?
                new ObjectParameter("cDetalleDiagnostico", cDetalleDiagnostico) :
                new ObjectParameter("cDetalleDiagnostico", typeof(string));
    
            var nTipoDiagnosticoIdParameter = nTipoDiagnosticoId.HasValue ?
                new ObjectParameter("nTipoDiagnosticoId", nTipoDiagnosticoId) :
                new ObjectParameter("nTipoDiagnosticoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GrabarDiagostico", nCitaIdParameter, cDetalleDiagnosticoParameter, nTipoDiagnosticoIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_GrabarPlanTratamiento(Nullable<int> nNroTerapias, Nullable<int> nVecesSemana, Nullable<int> nDiagnosticoId)
        {
            var nNroTerapiasParameter = nNroTerapias.HasValue ?
                new ObjectParameter("nNroTerapias", nNroTerapias) :
                new ObjectParameter("nNroTerapias", typeof(int));
    
            var nVecesSemanaParameter = nVecesSemana.HasValue ?
                new ObjectParameter("nVecesSemana", nVecesSemana) :
                new ObjectParameter("nVecesSemana", typeof(int));
    
            var nDiagnosticoIdParameter = nDiagnosticoId.HasValue ?
                new ObjectParameter("nDiagnosticoId", nDiagnosticoId) :
                new ObjectParameter("nDiagnosticoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_GrabarPlanTratamiento", nNroTerapiasParameter, nVecesSemanaParameter, nDiagnosticoIdParameter);
        }
    
        public virtual ObjectResult<USP_ListarAgentesRecomendados_Result> USP_ListarAgentesRecomendados(Nullable<int> nTipoDiagnosticoId)
        {
            var nTipoDiagnosticoIdParameter = nTipoDiagnosticoId.HasValue ?
                new ObjectParameter("nTipoDiagnosticoId", nTipoDiagnosticoId) :
                new ObjectParameter("nTipoDiagnosticoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ListarAgentesRecomendados_Result>("USP_ListarAgentesRecomendados", nTipoDiagnosticoIdParameter);
        }
    
        public virtual ObjectResult<USP_ListarCitas_Result> USP_ListarCitas(Nullable<int> nPacienteId)
        {
            var nPacienteIdParameter = nPacienteId.HasValue ?
                new ObjectParameter("nPacienteId", nPacienteId) :
                new ObjectParameter("nPacienteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ListarCitas_Result>("USP_ListarCitas", nPacienteIdParameter);
        }
    
        public virtual ObjectResult<USP_ListarCitasTratamiento_Result> USP_ListarCitasTratamiento(Nullable<int> nPacienteId)
        {
            var nPacienteIdParameter = nPacienteId.HasValue ?
                new ObjectParameter("nPacienteId", nPacienteId) :
                new ObjectParameter("nPacienteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ListarCitasTratamiento_Result>("USP_ListarCitasTratamiento", nPacienteIdParameter);
        }
    
        public virtual ObjectResult<USP_ListarMedicosRecomendados_Result> USP_ListarMedicosRecomendados(Nullable<int> idPaciente)
        {
            var idPacienteParameter = idPaciente.HasValue ?
                new ObjectParameter("idPaciente", idPaciente) :
                new ObjectParameter("idPaciente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ListarMedicosRecomendados_Result>("USP_ListarMedicosRecomendados", idPacienteParameter);
        }
    
        public virtual ObjectResult<USP_ObtenerDiagnostico_Result> USP_ObtenerDiagnostico(Nullable<int> nDiagnosticoId)
        {
            var nDiagnosticoIdParameter = nDiagnosticoId.HasValue ?
                new ObjectParameter("nDiagnosticoId", nDiagnosticoId) :
                new ObjectParameter("nDiagnosticoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ObtenerDiagnostico_Result>("USP_ObtenerDiagnostico", nDiagnosticoIdParameter);
        }
    
        public virtual ObjectResult<USP_ObtenerProfesionalesFechaTurno_Result> USP_ObtenerProfesionalesFechaTurno(Nullable<System.DateTime> fECHA, Nullable<int> nTURNOID, string hORA, Nullable<int> tIPO)
        {
            var fECHAParameter = fECHA.HasValue ?
                new ObjectParameter("FECHA", fECHA) :
                new ObjectParameter("FECHA", typeof(System.DateTime));
    
            var nTURNOIDParameter = nTURNOID.HasValue ?
                new ObjectParameter("NTURNOID", nTURNOID) :
                new ObjectParameter("NTURNOID", typeof(int));
    
            var hORAParameter = hORA != null ?
                new ObjectParameter("HORA", hORA) :
                new ObjectParameter("HORA", typeof(string));
    
            var tIPOParameter = tIPO.HasValue ?
                new ObjectParameter("TIPO", tIPO) :
                new ObjectParameter("TIPO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ObtenerProfesionalesFechaTurno_Result>("USP_ObtenerProfesionalesFechaTurno", fECHAParameter, nTURNOIDParameter, hORAParameter, tIPOParameter);
        }
    
        public virtual ObjectResult<USP_ObtenerUltimoDiagnostico_Result> USP_ObtenerUltimoDiagnostico(Nullable<int> nPacienteId)
        {
            var nPacienteIdParameter = nPacienteId.HasValue ?
                new ObjectParameter("nPacienteId", nPacienteId) :
                new ObjectParameter("nPacienteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ObtenerUltimoDiagnostico_Result>("USP_ObtenerUltimoDiagnostico", nPacienteIdParameter);
        }
    
        public virtual int USP_GrabarCitaSesion(Nullable<int> nPacienteId, Nullable<int> nProfesionalId, Nullable<System.DateTime> dFecha, string dHora, Nullable<int> nDetPlanServicioId, Nullable<int> nDiagnosticoId)
        {
            var nPacienteIdParameter = nPacienteId.HasValue ?
                new ObjectParameter("nPacienteId", nPacienteId) :
                new ObjectParameter("nPacienteId", typeof(int));
    
            var nProfesionalIdParameter = nProfesionalId.HasValue ?
                new ObjectParameter("nProfesionalId", nProfesionalId) :
                new ObjectParameter("nProfesionalId", typeof(int));
    
            var dFechaParameter = dFecha.HasValue ?
                new ObjectParameter("dFecha", dFecha) :
                new ObjectParameter("dFecha", typeof(System.DateTime));
    
            var dHoraParameter = dHora != null ?
                new ObjectParameter("dHora", dHora) :
                new ObjectParameter("dHora", typeof(string));
    
            var nDetPlanServicioIdParameter = nDetPlanServicioId.HasValue ?
                new ObjectParameter("nDetPlanServicioId", nDetPlanServicioId) :
                new ObjectParameter("nDetPlanServicioId", typeof(int));
    
            var nDiagnosticoIdParameter = nDiagnosticoId.HasValue ?
                new ObjectParameter("nDiagnosticoId", nDiagnosticoId) :
                new ObjectParameter("nDiagnosticoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GrabarCitaSesion", nPacienteIdParameter, nProfesionalIdParameter, dFechaParameter, dHoraParameter, nDetPlanServicioIdParameter, nDiagnosticoIdParameter);
        }
    }
}
